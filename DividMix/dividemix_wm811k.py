# -*- coding: utf-8 -*-
"""DivideMix_WM811k.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ERuq81F2D8Xt0oegvTexS-WEOf2V6qJh
"""
from __future__ import print_function

import sys
path = '../'
sys.path.append(path)

import torch.nn.functional as F
import torchvision.transforms.functional as TF

from torchvision import datasets, transforms
from torch.utils.data import DataLoader

import matplotlib
font = {'size': 14}
matplotlib.rc('font', **font)


from sklearn.metrics import f1_score, accuracy_score, average_precision_score, precision_score, recall_score


import sys
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torch.backends.cudnn as cudnn
import random
import os
import argparse
import numpy as np
os.environ['CUDA_LAUNCH_BLOCKING'] = "1"

from sklearn.mixture import GaussianMixture


from dataloader import *
from model import *

torch.cuda.is_available()

device = torch.device("cuda:6" if torch.cuda.is_available() else "cpu")

# torch.backends.cudnn.deterministic = True  # fix the GPU to deterministic mode
# torch.manual_seed(2)  # CPU seed
# if device == "cuda":
#     torch.cuda.manual_seed_all(2)  # GPU seed

# Commented out IPython magic to ensure Python compatibility.
def train(epoch,net,net2,optimizer, labeled_trainloader, unlabeled_trainloader, T=0.5, alpha=4):
    
    net.train()
    net2.eval() #fix one network and train the other
    
    unlabeled_train_iter = iter(unlabeled_trainloader)  
    
    num_iter = (len(labeled_trainloader.dataset)//labeled_trainloader.batch_size)+1
    for batch_idx, (inputs_x, inputs_x2, labels_x, w_x) in enumerate(labeled_trainloader):      
        try:
            inputs_u, inputs_u2 = unlabeled_train_iter.next()
        except:
            unlabeled_train_iter = iter(unlabeled_trainloader)
            inputs_u, inputs_u2 = unlabeled_train_iter.next()                 
        batch_size = inputs_x.size(0)
        
        # Transform label to one-hot
        labels_x = torch.zeros(batch_size, 7).scatter_(1, labels_x.view(-1,1), 1)        
        w_x = w_x.view(-1,1).type(torch.FloatTensor) 

        inputs_x, inputs_x2, labels_x, w_x = inputs_x.to(device), inputs_x2.to(device), labels_x.to(device), w_x.to(device)
        inputs_u, inputs_u2 = inputs_u.to(device), inputs_u2.to(device)

        with torch.no_grad():
            # label co-guessing of unlabeled samples
            outputs_u11 = net(inputs_u)
            outputs_u12 = net(inputs_u2)
            outputs_u21 = net2(inputs_u)
            outputs_u22 = net2(inputs_u2)            
            
            pu = (torch.softmax(outputs_u11, dim=1) + torch.softmax(outputs_u12, dim=1) + torch.softmax(outputs_u21, dim=1) + torch.softmax(outputs_u22, dim=1)) / 4       
            ptu = pu**(1/T) # temparature sharpening
            
            targets_u = ptu / ptu.sum(dim=1, keepdim=True) # normalize
            targets_u = targets_u.detach()       
            
            # label refinement of labeled samples
            outputs_x = net(inputs_x)
            outputs_x2 = net(inputs_x2)            
            
            px = (torch.softmax(outputs_x, dim=1) + torch.softmax(outputs_x2, dim=1)) / 2
            px = w_x*labels_x + (1-w_x)*px              
            ptx = px**(1/T) # temparature sharpening 
                       
            targets_x = ptx / ptx.sum(dim=1, keepdim=True) # normalize           
            targets_x = targets_x.detach()       
        
        # mixmatch
        l = np.random.beta(alpha, alpha)        
        l = max(l, 1-l)
                
        all_inputs = torch.cat([inputs_x, inputs_x2, inputs_u, inputs_u2], dim=0)
        all_targets = torch.cat([targets_x, targets_x, targets_u, targets_u], dim=0)

        idx = torch.randperm(all_inputs.size(0))

        input_a, input_b = all_inputs, all_inputs[idx]
        target_a, target_b = all_targets, all_targets[idx]
        
        mixed_input = l * input_a + (1 - l) * input_b        
        mixed_target = l * target_a + (1 - l) * target_b
                
        logits = net(mixed_input)
        logits_x = logits[:batch_size*2]
        logits_u = logits[batch_size*2:]        
           
        Lx, Lu, lamb = criterion(logits_x, mixed_target[:batch_size*2], logits_u, mixed_target[batch_size*2:], epoch+batch_idx/num_iter, warm_up)
        
        # regularization
        prior = torch.ones(7)/2
        prior = prior.to(device)        
        pred_mean = torch.softmax(logits, dim=1).mean(0)
        penalty = torch.sum(prior*torch.log(prior/pred_mean))

        loss = Lx + lamb * Lu  + penalty
        # compute gradient and do SGD step
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        sys.stdout.write('\r')
        sys.stdout.write('%s:%.1f-%s | Epoch [%3d/%3d] Iter[%3d/%3d]\t Labeled loss: %.2f  Unlabeled loss: %.2f'
                 %('LabWBMs', NOISE_LEVEL, 'symm', epoch, epochs, batch_idx+1, num_iter, Lx.item(), Lu.item()))
        sys.stdout.flush()



# Commented out IPython magic to ensure Python compatibility.
def warmup(epoch, net, optimizer, dataloader):
    
    NOISE_LEVEL = dataloader.dataset.r
    
    net.train()
    num_iter = (len(dataloader.dataset)//dataloader.batch_size)+1
    
    for batch_idx, (inputs, labels, Id) in enumerate(dataloader):      
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        
        outputs = net(inputs)               
        loss = CEloss(outputs, labels)
        
        if dataloader.dataset.noise_mode=='asymm':  # penalize confident prediction for asymmetric noise
            penalty = conf_penalty(outputs)
            L = loss + penalty      
        elif dataloader.dataset.noise_mode=='symm':   
            L = loss
            
        L.backward()  
        optimizer.step() 

        sys.stdout.write('\r')
        sys.stdout.write('%s:%.1f-%s | Epoch [%3d/%3d] Iter[%3d/%3d]\t CE-loss: %.4f'
                 %('LabWBMs', NOISE_LEVEL, dataloader.dataset.noise_mode, epoch, epochs, batch_idx+1, num_iter, L.item()))
        sys.stdout.flush()

def test(epoch, net1, net2):
    net1.eval()
    net2.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for batch_idx, (inputs, targets) in enumerate(test_loader):
            inputs, targets = inputs.to(device), targets.to(device)
            outputs1 = net1(inputs)
            outputs2 = net2(inputs)
            
            outputs1 = F.log_softmax(outputs1, dim=1)
            outputs2 = F.log_softmax(outputs2, dim=1)
            
            outputs = outputs1+outputs2
            #_, predicted = torch.max(outputs, 1)           
            total += targets.size(0)
            #correct += predicted.eq(targets).cpu().sum().item()                 
            
            pred = outputs.max(1, keepdim=True)[1] # get the index of the max log-probability
            correct += pred.eq(targets.view_as(pred)).sum().item()
            
    acc = 100.*correct/total
    print("\n| Test Epoch #%d\t Accuracy: %.2f%%\n" %(epoch,acc))  
    test_log.write('Epoch:%d   Accuracy:%.2f\n'%(epoch,acc))
    test_log.flush()
    return acc

def eval_train(model, all_loss):    
    model.eval()
    losses = torch.zeros(len(eval_loader.dataset))    
    with torch.no_grad():
        for batch_idx, (inputs, targets, Id) in enumerate(eval_loader):
            inputs, targets = inputs.to(device), targets.to(device)
            outputs = model(inputs) 
            loss = CE(outputs, targets)  
            for b in range(inputs.size(0)):
                losses[Id[b]]=loss[b]         
    losses = (losses-losses.min())/(losses.max()-losses.min())    
    all_loss.append(losses)

    if NOISE_LEVEL==0.9: # average loss over last 5 epochs to improve convergence stability
        history = torch.stack(all_loss)
        input_loss = history[-5:].mean(0)
        input_loss = input_loss.reshape(-1,1)
    else:
        input_loss = losses.reshape(-1,1)
    
    # fit a two-component GMM to the loss
    gmm = GaussianMixture(n_components=2,max_iter=10,tol=1e-2,reg_covar=5e-4)
    gmm.fit(input_loss)
    prob = gmm.predict_proba(input_loss) 
    prob = prob[:,gmm.means_.argmin()]         
    return prob, all_loss

def linear_rampup(current, warm_up, rampup_length=16, lambda_u=25):
    current = np.clip((current-warm_up) / rampup_length, 0.0, 1.0)
    return lambda_u*float(current)

class SemiLoss(object):
    def __call__(self, outputs_x, targets_x, outputs_u, targets_u, epoch, warm_up):
        probs_u = torch.softmax(outputs_u, dim=1)

        Lx = -torch.mean(torch.sum(F.log_softmax(outputs_x, dim=1) * targets_x, dim=1))
        Lu = torch.mean((probs_u - targets_u)**2)
        return Lx, Lu, linear_rampup(epoch,warm_up)

class NegEntropy(object):
    def __call__(self,outputs):
        probs = torch.softmax(outputs, dim=1)
        return torch.mean(torch.sum(probs.log()*probs, dim=1))

conf_penalty = NegEntropy()

def label2onehot(data, class_num):
  datasize = len(data)
  labels = np.zeros((len(data), class_num))
  for i, y in enumerate(data):
      labels[i][y] = 1
  return labels

def co_guess(x, net1, net2):
    net1.eval()
    net2.eval()

    outputs1 = net1(x)
    outputs2 = net2(x)
    
    outputs1 = F.log_softmax(outputs1, dim=1)
    outputs2 = F.log_softmax(outputs2, dim=1)
    outputs = outputs1+outputs2
            
    pred = outputs.max(1, keepdim=True)[1] # get the index of the max log-probability
            
    return pred

result_dict = {}

num_classes = 7
batch_size = 256
learning_rate = 4e-4
weight_decay = 5e-4
p_threshold = 0.5

noise_mode = 'symm'

epochs = 20
warm_up = 5
restart = 1

for NOISE_LEVEL in [0.2, 0.5, 0.7, 0.75]:
    experiments = 10
    experiments_avg_dic = {}
    for _ in range(experiments):
        
        Micros = []
        Macros = []
        Accs = []
        Test_losses = []
        Precisions = []
        Recalls = []
        
        
        # train
        cont = 0
        for r in range(restart):
            best_acc = 0
            stats_log = open('%s_%.1f_%s'%('WBM_SC', NOISE_LEVEL, noise_mode)+'_stats.txt','w') 
            test_log = open('%s_%.1f_%s'%('WBM_SC', NOISE_LEVEL, noise_mode)+'_acc.txt','w')

            loader = WBMs_dataloader(r=NOISE_LEVEL, noise_mode=noise_mode, batch_size=batch_size, pkl_dir=path, log=stats_log, num_workers=4)

            device = torch.device("cuda:6" if torch.cuda.is_available() else "cpu")
            print('| Building net')
            net1 = CNN(num_classes).to(device)
            net2 = CNN(num_classes).to(device)
            # pretrain
            bestRotmodel = path+'Rotate/Rotate/Rotate_best_epoch_99_valLoss_0.23348_valAcc_93.22971_bestAccVal_93.22971.pth'
            pretrained_dict = torch.load(bestRotmodel)
            filtered_dict = {k: v for k, v in pretrained_dict.items() if k not in ['fc2.weight', 'fc2.bias']}
            
            net1_dict = net1.state_dict(); net2_dict = net2.state_dict()    
            net1_dict.update(filtered_dict); net2_dict.update(filtered_dict)
            net1.load_state_dict(net1_dict); net2.load_state_dict(net2_dict)

            criterion = SemiLoss()
            optimizer1 = optim.Adam(net1.parameters(), lr=learning_rate, weight_decay=weight_decay)
            optimizer2 = optim.Adam(net2.parameters(), lr=learning_rate, weight_decay=weight_decay)

            CE = nn.CrossEntropyLoss(reduction='none')
            CEloss = nn.CrossEntropyLoss()

            all_loss = [[],[]] # save the history of losses from two networks

            for epoch in range(1, epochs+1):   
                lr=learning_rate

                if epoch >= 150:
                    lr /= 10      

                for param_group in optimizer1.param_groups:
                    param_group['lr'] = lr       
                for param_group in optimizer2.param_groups:
                    param_group['lr'] = lr

                test_loader = loader.run('test')
                eval_loader = loader.run('eval_train')  

                if epoch <= warm_up:       
                    warmup_trainloader = loader.run('warmup')
                    print('Warmup Net1')
                    warmup(epoch, net1, optimizer1, warmup_trainloader)    

                    print('\nWarmup Net2')
                    warmup(epoch, net2, optimizer2, warmup_trainloader) 

                else:         
                    prob1,all_loss[0]=eval_train(net1,all_loss[0])   
                    prob2,all_loss[1]=eval_train(net2,all_loss[1])          

                    pred1 = (prob1 > p_threshold)      
                    pred2 = (prob2 > p_threshold)      

                    print('Train Net1')
                    labeled_trainloader, unlabeled_trainloader = loader.run('train',pred2,prob2) # co-divide
                    train(epoch,net1,net2,optimizer1,labeled_trainloader, unlabeled_trainloader) # train net1  

                    print('\nTrain Net2')
                    labeled_trainloader, unlabeled_trainloader = loader.run('train',pred1,prob1) # co-divide
                    train(epoch,net2,net1,optimizer2,labeled_trainloader, unlabeled_trainloader) # train net2         
                cont+=1
                acc = test(epoch, net1, net2)
                    
                if epoch == 1:
                    best_acc = acc
                    snapBest = '%s_best_epoch_%d_valAcc_%.5f_noise_%.2f_bestAccVal_%.5f' % (r+1, epoch, acc, NOISE_LEVEL, best_acc)
                    directory = './{}'.format(noise_mode) # noise type / pattern
                    os.makedirs(directory, exist_ok=True)
                    torch.save(net1.state_dict(), os.path.join(directory, snapBest + '_net1.pth'))
                    torch.save(net2.state_dict(), os.path.join(directory, snapBest + '_net2.pth'))
                    #print('└ save the best model in\n {}/{}\n {}/{}\n'.format(directory, snapBest+'_net1.pth', directory, snapBest+'_net2.pth')) 
                    best_net1 = directory+'/'+snapBest+'_net1.pth'
                    best_net2 = directory+'/'+snapBest+'_net2.pth'
                    #torch.save(optimizer.state_dict(), os.path.join(directory, 'opt_' + snapBest + '.pth'))

                else:
                    if acc > best_acc and epoch > warm_up:
                        best_acc = acc

                        if cont>0:
                            try:
                                os.remove(os.path.join(directory, snapBest + '_net1.pth'))
                                os.remove(os.path.join(directory, snapBest + '_net2.pth'))
                            except OSError:
                                pass
                        snapBest = '%s_DivideMix_best_epoch_%d_valAcc_%.5f_noise_%.2f_bestAccVal_%.5f' % (
                            r+1, epoch, acc, NOISE_LEVEL, best_acc)
                        torch.save(net1.state_dict(), os.path.join(directory, snapBest + '_net1.pth'))
                        torch.save(net2.state_dict(), os.path.join(directory, snapBest + '_net2.pth'))
                        best_net1 = directory+'/'+snapBest+'_net1.pth'
                        best_net2 = directory+'/'+snapBest+'_net2.pth'

        
        # evaluation
        test_loader = loader.run('test')

        best_net1_test = CNN(num_classes).to(device)
        best_net2_test = CNN(num_classes).to(device)
        best_net1_test.load_state_dict(torch.load(best_net1))
        best_net2_test.load_state_dict(torch.load(best_net2))
        best_net1_test.eval()
        best_net2_test.eval()

        correct=0
        test_loss=0.0
        MacroF1=0.0
        MicroF1=0.0
        precision = 0.0
        recall = 0.0

        with torch.no_grad():
            for x, y in test_loader:
                x = x.to(device)
                y = y.to(device)

                outputs1 = best_net1_test(x)
                outputs2 = best_net2_test(x)
                outputs1 = F.log_softmax(outputs1, dim=1)
                outputs2 = F.log_softmax(outputs2, dim=1)
                
                outputs = outputs1+outputs2
                test_loss += F.nll_loss(outputs, y, reduction='sum')

                softmax_output = torch.softmax(outputs1+outputs2, 1)
                pred = softmax_output.argmax(dim=1, keepdim=True)
                correct += pred.eq(y.view_as(pred)).sum().item()
                y_pred = (softmax_output > 0.5)

                y = label2onehot(y, num_classes)
                MicroF1 += f1_score(y, y_pred.cpu(), average='micro')
                MacroF1 += f1_score(y, y_pred.cpu(), average='macro')
                precision += precision_score(y, y_pred.cpu(), average='macro')
                recall += recall_score(y, y_pred.cpu(), average='macro')

            test_loss /= len(eval_loader.dataset)
            precision /= len(eval_loader)
            recall /= len(eval_loader)
            MicroF1 /= len(eval_loader)
            MacroF1 /= len(eval_loader)
            # correct /= len(test_loader.dataset)
            Acc = 100*correct/len(eval_loader.dataset)
            print('┌ MicroF1: {:.5f}\n│ MacroF1: {:.5f}\n│ Precision: {:.5f}\n│ Recall: {:.5f}\n│ Acc: {}/{} ({:.5f})\n└ Test_loss : {:.5f}'.format(
                MicroF1, MacroF1, precision, recall, correct, len(eval_loader.dataset), Acc, test_loss))


        Micros.append(MicroF1)
        Macros.append(MacroF1)
        Accs.append(Acc)
        Test_losses.append(test_loss.item())
        Precisions.append(precision)
        Recalls.append(recall)
          
    
    experiments_avg_dic['Micro']     = str(np.mean(np.array(Micros), axis=0))+'__'+str(np.std(np.array(Micros), axis=0))
    experiments_avg_dic['Macro']     = str(np.mean(np.array(Macros), axis=0))+'__'+str(np.std(np.array(Macros), axis=0))
    experiments_avg_dic['Acc']       = str(np.mean(np.array(Accs), axis=0))+'__'+str(np.std(np.array(Accs), axis=0))
    experiments_avg_dic['Test_loss'] = str(np.mean(np.array(Test_losses), axis=0))+'__'+str(np.std(np.array(Test_losses), axis=0))
    experiments_avg_dic['Precision'] = str(np.mean(np.array(Precisions), axis=0))+'__'+str(np.std(np.array(Precisions), axis=0))
    experiments_avg_dic['Recall']    = str(np.mean(np.array(Recalls), axis=0))+'__'+str(np.std(np.array(Recalls), axis=0))

    result_dict[NOISE_LEVEL] = experiments_avg_dic

import pandas as pd
result_df = pd.DataFrame.from_dict({(i,j): [result_dict[i][j]] 
                                    for i in result_dict.keys() 
                                    for j in result_dict[i].keys()})

from IPython.display import display
display(result_df)

result_df.to_csv("DivideMix_result_symm.csv")